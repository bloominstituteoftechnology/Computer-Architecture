AND, OR, NOT, XOR

Operation       Boolean Operator        Bitwise Operator
AND                 && (and)                &
OR                  || (or)                 |
NOT                 != (not)                ~
XOR                 none!                   ^

XOR(exclusive or):  True xor False --> True
                    True xor True  --> False
                    False xor False--> False
                    False xor True --> True
                    (only one can be True to true,
                    if both are True, the result is False)

if (True and True):
if (True and False)
if a or b:

if (True && False) {}
if (a || b) {}

  0b1010101
& 0b1000101
-----------
  0b1001101

  0b0011100
& 0b1010101
-----------
  0b0010100

print(0b011 & 0b110)
print(bin(0b011 & 0b110))

  0b1010101
| 0b1000101
-----------
  0b1010101

  0b0011100
| 0b1010101
-----------
  0b1011101

~ 0b001110
-----------
  0b110001

  0b0011100
^ 0b1010101
-----------
  0b1001001


Shifting

Right Shifting
0b10101010
 0b101010 >> 1
  0b10101 >> 2
   0b1010 >> 3


00010101

Left Shifting
  10101010 << 1
101010100  << 2

How to isolate bits that we are interested in?
 10101010
 10101010 >> 6
       10

How about those in the middle?
    vv
 10101010
 10101010 >> 3
 10101

Solution: we can (and) with another number that has 0s (zeros) for the bits we don't care about
and 1s (ones) for those we want to get
This is called masking

 10101
&00011
------
 00001


ADD register1 register2
  10100000 >> 6
        10

pc += 1 + (command >> 6)

HALT
  00000001

memory = [
    ADD,
    register1,
    register2,
    HALT
]